Day 4 - 26/12/24

Scope:
1. Global Scope
2. Function Scope
3. Block Scope

Example:
// Global Scope
let a = 10;

function scope(){
    let b = 20; // Function Scope
    console.log(b);
    console.log(a);
}
scope();
console.log(b);

// Block Scope
{
    let a = "Hello";
    console.log(a);
}
console.log(a); // ReferenceError: a is not defined

Hoisting: Hoisting is the process of moving a variable or function to the top of its scope

- Variable Hoisting: 
- Variables are hoisted to the top of their scope, but their values are not.

Example:
console.log(a); // undefined
var a = 10; 

console.log(b);
let b = 20; // ReferenceError: Cannot access 'b' before initialization

- Function Hoisting:
Function declarations are fully hoisted,
meaning both the function name and the function body are moved to the top of the scope.

Example:
thiru();
function thiru(){
    let x = 10;
    console.log(x);  
}

Example1:
arrowFun();
const arrowFun=()=>{
    console.log("Arrow function");
}

Array:
let arr = [100, 200, 300, 400, 500];
console.log(arr[3]); // index 3 is 400
console.log(arr.length); // length of array is 5

Push() & Pop(): Add or remove elements from the end of the array
Push():
let fruits = ["Apple", "Banana"];
fruits.push("Orange");
console.log(fruits); // ["Apple", "Banana", "Orange"]

Pop():
let fruits = ["Apple", "Banana", "Mango"];
fruits.pop();
console.log(fruits);

shift() & unshift(): Add or remove elements from the beginning of the array
Unshift():
Example:
let fruits = ["Apple", "Banana", "Mango"];
fruits.unshift("Orange");
console.log(fruits);

shift():
Example:
let fruits = ["Apple", "Banana", "Mango"];
fruits.shift();
console.log(fruits);

slice() & splice(): Extract or modify parts of an array.
slice():
Example:
let arr = [100, 200, 300, 400, 500];
         // 0    1    2    3    4

const reSlice = arr.slice(1, 4);
console.log(reSlice);

Splice:
Example:
let arr = [100, 200, 300, 400, 500];
         // 0    1    2    3    4

const reSlice = arr.splice(1, 3);
console.log(reSlice); // [200, 300, 400]

Map, Reduce, Filter - MRF:

var arr = [1, 2, 3, 4, 5];
var sum = [2, 4, 6, 8, 10];

Step1: for loop
Step2: arr[i]*2
Step3: declare an empty and push
step4: return result

Map():
- it will take function as a parameter
- it is applicable only for array.
- it will be applied each and every element of an array.
- it will return a new array.

Syntax: arr.map(func name);

Example:
var arr = [12,13,14,15];
var res = arr.map((ele)=>ele*2);
console.log(res);

Task: 
var arr = [{name:"john", age:32}, {name:"peter", age:25}, {name:"jack", age:35}];
increase: age +5
Hint: Map, DOT Method

2. Filter:
var arr = [1,2,3,4,5];
var res = [2,4];

Step1: for loop
Step2: if condition arr[i]%2==0
Step3: declare an empty array and push
Step4: return result

- Filter takes function as a parameter
- it is applicable only for array.
- it will be applied each and every element of an array.
- if a certain condition is the function, is passed then it will be pushed
- or it be ignored
- it will return a new array.

Example:
var arr = [1,2,3,4,5];
var res = arr.filter((ele)=>ele%2==0);
console.log(res);

Reduce:
- Reduce function takes function as a parameter.
- it is applicable only for array.
- it will return a single element
- it will take sum of whole array.
- it apply function on each and every element of an array.

var arr = [12,13,14,15]

1st Case:
acc: accumulator it refers initial value
ele: element it refers to element array.

Example:
var arr = [12,13,14,15];
var res = arr.reduce((acc, ele)=>acc+ele);
console.log(res);

2nd Case: when initial value are given.

Example:
var arr = [12,13,14,15];
var res = arr.reduce((acc, ele)=>acc+ele, 1);
console.log(res);

Object:

let person = {
    name: "John",
    age: 30,
    city: "New York"
}

console.log(person.name);
console.log(Object.keys(person));
console.log(Object.values(person));
person.gender = "male";
console.log(person);

// JSON - JavaScript Object Notation:
{
    "name": "John",
    "age": 30,
    "city": "New York"
}

